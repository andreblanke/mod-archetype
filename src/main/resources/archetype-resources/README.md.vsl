# ${modName}

This repository contains a template for a Minecraft mod targeting both the Fabric and Forge mod loaders, relying only
on [ForgeGradle](https://github.com/MinecraftForge/ForgeGradle) and
[Fabric Loom](https://github.com/FabricMC/fabric-loom) for its build system, as opposed to mods developed using
[Architectury](https://github.com/architectury).

The template is already configured to support [Mixins](https://github.com/SpongePowered/Mixin),
[Cloth Config](https://github.com/shedaniel/cloth-config), and [Mod Menu](https://github.com/TerraformersMC/ModMenu).
#[[
## Table of contents
]]#
- [Project structure](#project-structure)
- [Troubleshooting](#troubleshooting)
  - [Fabric IntelliJ IDEA run/debug configurations not generating](#fabric-intellij-idea-rundebug-configurations-not-generating)
  - [Could not initialize class org.jetbrains.kotlin.com.intellij.pom.java.LanguageLevel](#could-not-initialize-class-orgjetbrainskotlincomintellijpomjavalanguagelevel)
#[[
## Project structure
]]#
#set($packageDirs = $package.replace('.', '/'))
```text
mod-template
 ├─ buildSrc/
 │   └─ src/main/kotlin/${packageDirs}/build/
 │       │  # Common build-time properties used by the fabric/forge modules'
 │       │  # build.gradle.kts.
 │       └─ ${modName}.kt
 ├─ common/
 │   └─ src/main/
#if ($language == "java")
 │       └─ java/${packageDirs}/
 │           ├─ mixin/
 │           │   └─ .gitkeep
 │           │  # Common main class inherited by ${modName}Fabric and ${modName}Forge.
 │           └─ ${modName}.java
#elseif ($language == "kotlin")
 │       │  # Package for mixins which must be written in Java.
 │       ├─ java/${packageDirs}/mixin/
 │       │   └─ .gitkeep
 │       └─ kotlin/${packageDirs}/
 │           │  # Common main class inherited by ${modName}Fabric and ${modName}Forge.
 │           └─ ${modName}.kt
#end
 ├─ fabric/
#if ($language == "java")
 │   └─ src/main/java/${packageDirs}/
 │       │  # Entry point for Fabric.
 │       └─ ${modName}Fabric.java
#elseif ($language == "kotlin")
 │   └─ src/main/kotlin/${packageDirs}/
 │       │  # Entry point for Fabric.
 │       └─ ${modName}Fabric.kt
#end
 └─ forge/
#if ($language == "java")
     └─ src/main/java/${packageDirs}/
         │  # Entry point for Forge.
         └─ ${modName}Forge.java
#elseif ($language == "kotlin")
     └─ src/main/kotlin/${packageDirs}/
         │  # Entry point for Forge.
         └─ ${modName}Forge.kt
#end
```
#[[
## Troubleshooting

### IntelliJ IDEA shows problems regarding `fabric.mod.json` or `mods.toml`
]]#
The problems are caused by checks stemming from the Minecraft Development or the Toml plugin because both are not aware
that the two files are merely templates that are later populated through Gradle property expansion.

In the case of `fabric.mod.json` the IDE should only consider the violation of the `id` pattern a problem which can
easily be suppressed by switching from "Highlight: All Problems" to "Highlight: Syntax".

`mods.toml` is more of a challenge because problems remain even if highlighting is changed to "Highlight: None".
To get rid of the problems entirely one would either have to disable the Toml plugin or, if that is not an option,
rename `mods.toml` to something else and tweak the `processResources` to output the processed file as `mods.toml`.
#[[
### Fabric IntelliJ IDEA run/debug configurations not generating
]]#
No fixes for this are known at the time of writing, though several people claim to have similar issues on the Fabric
Discord. As a temporary workaround the two run configurations `fabric_runClient.xml` and `fabric_runServer.xml` have
been committed to source control.
#[[
### Could not initialize class org.jetbrains.kotlin.com.intellij.pom.java.LanguageLevel
]]#
```text
java.lang.NoClassDefFoundError: Could not initialize class org.jetbrains.kotlin.com.intellij.pom.java.LanguageLevel
	at org.jetbrains.kotlin.com.intellij.core.CoreLanguageLevelProjectExtension.<init>(CoreLanguageLevelProjectExtension.java:26)
	at org.jetbrains.kotlin.com.intellij.core.JavaCoreProjectEnvironment.<init>(JavaCoreProjectEnvironment.java:42)
	at org.jetbrains.kotlin.cli.jvm.compiler.KotlinCoreProjectEnvironment.<init>(KotlinCoreProjectEnvironment.kt:26)
    [...]
```

You likely started the Gradle daemon with a currently unsupported JDK pointed to by your `JAVA_HOME` environment
variable. In my case this occurred because I was using JDK 17. Changing `JAVA_HOME` to a path containing a JDK
installation of version 16 and killing all active Gradle daemons resolved the issue.
